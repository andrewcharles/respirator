"""
    Plots the data generated by time_nlist.py

    neighbour_list.FortranVerletList(p,cutoff=10,tolerance=2)
    neighbour_list.CythonVerletList(p,cutoff=10,tolerance=2)
    neighbour_list.FastVerletList(p,cutoff=10,tolerance=2)
    neighbour_list.VerletList(p,cutoff=10,tolerance=2)
    return neighbour_list.KDList(p,cutoff=10,tolerance=2)
    # Not plotted!
    return neighbour_list.BruteScipy(p)

"""


import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import linregress
import platform
plt.ion()

lists = ['fortran','cython','fastcython','kd']#,'pdist']
colors = {  'fortran':'b',
            'cython':'r',
            'fastcython':'g',
            'kd':'k'#,
  #          'pdist':'c'
         }

#lists = ['fastcython']#,'kd']
#colors = {  
#            'fastcython':'g',
#            'kd':'k',
#         }

data = {}
number = {}
pairs = {}
pair_times = {}
build_times = {}
nline = {}
pline = {}

for list_type in lists:
    fname = list_type + 'pairtime' + '.dat'
    ofile = open(fname,'r')
    data = np.loadtxt(ofile)
    n = data.shape[0]
    number[list_type] = data[0:n,0]
    pairs[list_type] = data[0:n,1]
    pair_times[list_type] = data[0:n,2]
    build_times[list_type] = data[0:n,3]

regs = {}
for list_type in lists:
    regs[list_type] =  linregress(pairs[list_type],pair_times[list_type])
    print list_type,regs[list_type][0]

#print regs['fastcython'][0]/regs['cython'][0] 

plt.figure()
fig = plt.gcf()
quad = plt.subplot(1,2,1)
#quad = fig.add_axes([0.14,0.1,0.75,0.75])
quad.set_ylabel('Time (s)')
quad.set_xlabel('Number of pairs (thousand)')
quad.set_xticks([50000,100000,150000,200000,250000,300000,350000])
quad.set_xticklabels(['50','100','150','200','250','300','350'])

for list_type in lists:
    pline[list_type], = quad.plot(pairs[list_type],pair_times[list_type],
        colors[list_type]+'o')

leg = plt.legend(
    [pline[key] for key in sorted(pline.keys())],
    sorted(pline.keys()),
    loc='upper left',fontsize=9)
plt.title('Time to compute pair separation. ')

plt.figtext(0.02,0.02,platform.platform(),size=9)

quad = plt.subplot(1,2,2)
#quad = fig.add_axes([0.14,0.1,0.75,0.75])
quad.set_ylabel('Time (s)')
quad.set_xlabel('Number of pairs (thousand)')
quad.set_xticks([50000,100000,150000,200000,250000,300000,350000])
quad.set_xticklabels(['50','100','150','200','250','300','350'])

for list_type in lists:
    pline[list_type], = quad.plot(pairs[list_type],build_times[list_type],
        colors[list_type]+'o')

leg = plt.legend(
    [pline[key] for key in sorted(pline.keys())],
    sorted(pline.keys()),
    loc='upper left',fontsize=9)
plt.title('Time to compute pairs. ')# +  platform.platform(),size=9)

plt.savefig('neighbour_list_timing.png')


plt.figure()
quad = plt.subplot(1,1,1)
for list_type in lists:
    pline[list_type], = quad.plot(number[list_type],pairs[list_type],
        colors[list_type]+'o')

plt.title('N pairs by N',size=9)

plt.savefig('n_versus_pairs.png')

